{"ast":null,"code":"var _jsxFileName = \"/Users/tim/_Dapp_ex/DappU4_Election/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Election from '../abis/Election.json';\nimport MyNavbar from './MyNavbar.js';\nimport Main from './Main.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    const networkId = await web3.eth.net.getId();\n    const networkData = Election.networks[networkId];\n\n    if (networkData) {\n      const election = new web3.eth.Contract(Election.abi, networkData.address);\n      this.setState({\n        election\n      });\n      const candidatesCount = await this.state.election.methods.candidatesCount().call();\n      this.setState({\n        candidatesCount\n      }); // console.log(\"No. of candidates:\", candidatesCount)\n      // List all candidates' data on console.log:\n\n      for (var i = 1; i <= candidatesCount; i++) {\n        const can = await this.state.election.methods.candidates(i).call();\n        this.setState({\n          candidates: [...this.state.candidates, can]\n        });\n      } //console.log(this.state.candidates)\n      // List account 1's data on console.log:\n\n\n      const isVoted = await this.state.election.methods.voters(accounts[0]).call();\n      this.setState({\n        isVoted\n      }); // console.log(\"Account 1's data:\", accounts[0], isVoted)\n\n      this.setState({\n        loading: false\n      });\n    } else {\n      window.alert('Election contract not deployed to detected network.');\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      isVoted: false,\n      loading: true,\n      candidatesCount: 0,\n      value: 0,\n      candidates: []\n    };\n    this.vote = this.vote.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  vote(id) {\n    this.setState({\n      loading: true\n    });\n    this.state.election.methods.vote(id).send({\n      from: this.state.account\n    }).once('receipt', receipt => {\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    alert('You chose Candidate ' + this.state.value + '. Please press OK to confirm.');\n    this.vote(this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(MyNavbar, {\n        account: this.state.account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main\",\n        children: this.state.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"loader\",\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-center\",\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 56\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Main, {\n          candidatesCount: this.state.candidatesCount,\n          candidates: this.state.candidates,\n          isVoted: this.state.isVoted,\n          value: this.state.value,\n          vote: this.vote,\n          handleChange: this.handleChange,\n          handleSubmit: this.handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tim/_Dapp_ex/DappU4_Election/src/components/App.js"],"names":["React","Component","Web3","Election","MyNavbar","Main","App","componentDidMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","accounts","eth","getAccounts","setState","account","networkId","net","getId","networkData","networks","election","Contract","abi","address","candidatesCount","state","methods","call","i","can","candidates","isVoted","voters","loading","constructor","props","value","vote","bind","handleChange","handleSubmit","id","send","from","once","receipt","event","target","preventDefault","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3'\nimport './App.css';\n\nimport Election from '../abis/Election.json'\n\nimport MyNavbar from './MyNavbar.js'\nimport Main from './Main.js'\n\nclass App extends Component {\n\n  async componentDidMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n\n    const networkId = await web3.eth.net.getId()\n    const networkData = Election.networks[networkId]\n    if(networkData) {\n        const election = new web3.eth.Contract(Election.abi, networkData.address)\n        this.setState({ election })\n          \n        const candidatesCount = await this.state.election.methods.candidatesCount().call()\n        this.setState({candidatesCount})\n        // console.log(\"No. of candidates:\", candidatesCount)\n\n        // List all candidates' data on console.log:\n        for(var i=1; i<=candidatesCount; i++){\n          const can = await this.state.election.methods.candidates(i).call()\n          this.setState({\n            candidates:[...this.state.candidates, can]\n          })\n        }\n        //console.log(this.state.candidates)\n  \n        // List account 1's data on console.log:\n        const isVoted = await this.state.election.methods.voters(accounts[0]).call()\n        this.setState({isVoted})\n        // console.log(\"Account 1's data:\", accounts[0], isVoted)\n\n        this.setState({ loading: false })\n    } else {\n        window.alert('Election contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      isVoted: false,\n      loading: true, \n      candidatesCount: 0,\n      value: 0,\n      candidates: []\n    }\n \n    this.vote = this.vote.bind(this)\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  vote(id) {\n    this.setState({loading: true})\n    this.state.election.methods.vote(id).send({from: this.state.account})\n    .once('receipt', (receipt) => {\n      this.setState({loading: false})\n    })\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert('You chose Candidate ' + this.state.value + '. Please press OK to confirm.');\n    this.vote(this.state.value)\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n  \n      <MyNavbar account={this.state.account}/>\n  \n        <div id=\"main\">\n            { this.state.loading \n            ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\n            : <Main \n            candidatesCount={this.state.candidatesCount}\n            candidates={this.state.candidates}\n            isVoted={this.state.isVoted}\n            value={this.state.value}\n            vote={this.vote}\n            handleChange={this.handleChange}\n            handleSubmit={this.handleSubmit}\n            />\n            }\n\n        </div>\n            \n      </div>\n\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}